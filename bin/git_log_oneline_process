#!/usr/bin/env ruby --disable-all

# frozen_string_literal: true

# rubocop:disable Style/SpecialGlobalVars

def branch_exist?(branch)
  (
    @branch_exist ||= Hash.new do |hash, key|
      hash[key] = key && !`git_branch_if_exist #{key}`.chomp.empty?
    end
  )[branch]
end

def main_branch
  @main_branch ||= `git_main_branch`.chomp
end

def current_branch
  @current_branch ||= `git_branch_name`.chomp
end

def current_branch_main?
  main_branch == current_branch
end

def forks
  @forks ||= {
    magenta: 'upstream/HEAD',
    blue: (branch_exist?('origin/HEAD') ? 'origin/HEAD' : main_branch),
    cyan: ('@{u}' unless current_branch_main?),
    green: 'HEAD'
  }.select { |_, v| branch_exist?(v) }
end

# this is split on the magic sigil in git_log_oneline
def next_line_split(line)
  line.split("\e[m\e[31m\e[32m\e[34m\e[m", 2)
end

gets
line = $_
exit 0 unless line
sha, rest = next_line_split(line)
first = `git rev-parse --short #{sha}^ 2>/dev/null`.chomp
first = first.empty? ? '' : "#{first}.."
forks.transform_values! do |v|
  `git log --format=%h #{first}#{v}`.chomp.split("\n").to_h { |k| [k, nil] }
end

def render(sha, rest) # rubocop:disable Metrics
  color = if forks[:magenta]&.key?(sha)
    "\e[35m"
  elsif forks[:blue]&.key?(sha)
    "\e[34m"
  elsif forks[:cyan]&.key?(sha)
    "\e[36m"
  elsif forks[:green]&.key?(sha)
    "\e[32m"
  end
  "#{color}#{sha}\e[m#{rest.chomp}\e[0m"
end

print "\e[?7l" # disable line wrap
print render(sha.chomp, rest)

while gets
  puts
  sha, rest = next_line_split($_)
  print render(sha.chomp, rest.to_s)
end

puts "\e[?7h" # reenable line wrap

# rubocop:enable Style/SpecialGlobalVars
