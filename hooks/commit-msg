#!/usr/bin/env bash

shopt -u nocasematch

source ~/.dotfiles/functions/git_support.sh

git_system && exit 0

function handle_error {
  # detect if we're currently amending (https://stackoverflow.com/questions/19387073/how-to-detect-commit-amend-by-pre-commit-hook)
  if [[ ! -z "$(ps -ocommand= -p $PPID | grep -e '--amend')" ]]; then
    amend_option="--amend"
  fi

  echoerr "$@"
  # setting GIT_EDITOR because -m overwrites GIT_EDITOR to be `:`
  GIT_EDITOR=$(git config core.editor) echodo git commit $amend_option --edit --file=$(git rev-parse --show-toplevel)/.git/COMMIT_EDITMSG --no-verify
  exit 1
}

non_comment_line_number=0
while read -r line; do
  if [[ "$line" == "# ------------------------ >8 ------------------------" ]]; then
    break
  elif [[ "${line:0:1}" != "#" ]]; then
    if (( $non_comment_line_number == 0 )); then
      # git generated messages (or WIP or Temp)
      if [[ "$line" =~ ^(WIP|'Revert '|'Merge '|'fixup! '|Temp) ]]; then
        exit 0
      fi

      if [[ "${line: -1}" == "." ]]; then
        handle_error "Commit message subject ends with a '.' character"
      fi


      if [[ "${line:0:1}" == [a-z] ]] && [[ "${line:0:1}" != [A-Z] ]]; then # for some reason travis doesn't know what case is
        handle_error "Commit message subject starts with a lowercase character"
      fi

      if (( ${#line[0]} > 50 )); then
        handle_error "Commit message subject is too long (50 characters max)"
      fi

    elif (( $non_comment_line_number == 1 )); then
      if (( ${#line[0]} > 0 )); then
        handle_error "Commit message must have an empty line between subject and description"
      fi
    else
      # body lines must be less than 72 chars, allow long lines for urls etc
      if (( ${#line[0]} > 72 )) && [[ "$line" == *' '* ]]; then
        handle_error "Commit message description line ($line) is too long (72 characters max)"
      fi
    fi
    (( non_comment_line_number++ ))
  fi
done < $1

exit 0
